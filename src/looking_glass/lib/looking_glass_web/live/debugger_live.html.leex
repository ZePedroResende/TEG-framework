
<section class="phx-hero">
<h1>Welcome to the Looking Glass debugger</h1>
</section>
<script src="https://d3js.org/d3.v6.min.js"></script>
<script>
const height = 600
const width = 960
const data = {
"nodes": [
  {
    "id": 1,
    "name": "A"
  },
  {
    "id": 2,
    "name": "B"
  },
  {
    "id": 3,
    "name": "C"
  },
  {
    "id": 4,
    "name": "D"
  },
  {
    "id": 5,
    "name": "E"
  },
  {
    "id": 6,
    "name": "F"
  },
  {
    "id": 7,
    "name": "G"
  },
  {
    "id": 8,
    "name": "H"
  },
  {
    "id": 9,
    "name": "I"
  },
  {
    "id": 10,
    "name": "J"
  }
],
"links": [

  {
    "source_id": 1,
    "target_id": 2
  },
  {
    "source_id": 1,
    "target_id": 5
  },
  {
    "source_id": 1,
    "target_id": 6
  },

  {
    "source_id": 2,
    "target_id": 3
  },
          {
    "source_id": 2,
    "target_id": 7
  }
  ,

  {
    "source_id": 3,
    "target_id": 4
  },
   {
    "source_id": 8,
    "target_id": 3
  }
  ,
  {
    "source_id": 4,
    "target_id": 5
  }
  ,

  {
    "source_id": 4,
    "target_id": 9
  },
  {
    "source_id": 5,
    "target_id": 10
  }
]
}
// return svg.node();

const drag = simulation => {

function dragstarted(event, d) {
  if (!event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(event, d) {
  d.fx = event.x;
  d.fy = event.y;
}

function dragended(event, d) {
  if (!event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

return d3.drag()
    .on("start", dragstarted)
    .on("drag", dragged)
    .on("end", dragended);
}

const root = d3.hierarchy(data);
const links = root.links();
const nodes = root.descendants();

const simulation = d3.forceSimulation(nodes)
    .force("link", d3.forceLink(links).id(d => d.id).distance(0).strength(1))
    .force("charge", d3.forceManyBody().strength(-50))
    .force("x", d3.forceX())
    .force("y", d3.forceY());

const svg = d3.select("body").append("svg")
    .attr("viewBox", [-width / 2, -height / 2, width, height]);

const link = svg.append("g")
    .attr("stroke", "#999")
    .attr("stroke-opacity", 0.6)
  .selectAll("line")
  .data(links)
  .join("line");

const node = svg.append("g")
    .attr("fill", "#fff")
    .attr("stroke", "#000")
    .attr("stroke-width", 1.5)
    .selectAll("circle")
    .data(nodes)
    .join("circle")
      .attr("fill", d => d.children ? null : "#000")
      .attr("stroke", d => d.children ? null : "#fff")
      .attr("r", 3.5)
      .call(drag(simulation));

  node.append("title")
      .text(d => d.data.name);

  simulation.on("tick", () => {
    link
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

    node
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);
  });
</script>

<h1>Nodes: </h1>
<h2 id="nodes"><%= Jason.encode(@nodes) |> elem(1) %></h2>
<h1>Events: </h1>
<table>
    <thead>
    <tr>
        <th>Id</th>
        <th>function</th>
        <th>result</th>
        <th>thread_id</th>
    </tr>
    </thead>

    <tbody id ="events">
    <%= for item <- @e do %>
    <tr id="event-<%= item.id %>">
        <td><%= item.id %></td>
        <td><%= item.result["function"] %></td>
        <td><%= item.result["result"] %></td>
        <td><%= item.result["thread_id"] %></td>
    </tr>
    <% end %>
    </tbody>


</table>
